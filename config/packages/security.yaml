security:
    # http://symfony.com/doc/current/security/named_encoders.html
    encoders:
        App\Entity\Users:
            algorithm: sha512
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # in_memory: { memory: ~ }
        api_user_provider:
            entity:
                class: App\Entity\Users
                property: username
    firewalls:
        refresh:
            pattern:  ^/api/token/refresh
            stateless: true
            anonymous: true
        # dev:
            # pattern: ^/(jwt_(profiler|wdt)|css|images|js)/
            # security: false
        # main:
            # anonymous: true
            # activate different ways to authenticate
            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            form_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                # field names for the username and password fields
                # value username_parameter default _username
                username_parameter: username
                password_parameter: password
                require_previous_session: false
        api:
            pattern:   ^/api/auth
            stateless: true
            # 
            anonymous: true
            provider: api_user_provider
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/get_settings, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/signup, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/auth, roles: IS_AUTHENTICATED_FULLY }